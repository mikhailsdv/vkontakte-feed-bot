const {Telegraf} = require("telegraf")
const config = require("./config")
const log = require("./log")
const {
	trimMessage,
	getAuthUrl,
	buildCallbackData,
	parseCallbackData,
	accessTokenRegEx,
	postURLRegEx,
	howToAuthText,
} = require("./utils")
const {
	isUserExist,
	isAuthed,
	isFeedRevoked,
	isFeedBlocked,
	createUser,
	activateFeed,
	pauseFeed,
	attachAccessToken,
	revokeAccessToken,
	getVkUser,
	getPostById,
	addLike,
	deleteLike,
	getUserByChatId,
} = require("./api")
const {categorizePost, sendPostToTelegram} = require("./converter")
const bot = new Telegraf(config.BOT_TOKEN)

const keyboards = {
	auth: [
		[
			{
				text: "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –í–ö",
				url: getAuthUrl(),
			},
		],
	],
	authAndSecurity: [
		[
			{
				text: "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –í–ö",
				url: getAuthUrl(),
			},
		],
		[
			{
				text: "–û –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
				callback_data: "security",
			},
		],
	],
}

const commands = {
	start: {
		hears: ["/start"],
		handler: async ctx => {
			const isUserExist_ = await isUserExist({chat_id: ctx.from.id})
			if (!isUserExist_) {
				await createUser({
					chat_id: ctx.from.id,
					username: ctx.from.username || "",
					first_name: ctx.from.first_name,
					language_code: ctx.from.language_code || "",
				})
			} else {
				const isFeedBlocked_ = await isFeedBlocked({chat_id: ctx.from.id})
				if (isFeedBlocked_) {
					await commands.restart.handler(ctx)
					return
				}

				const isFeedRevoked_ = await isFeedRevoked({chat_id: ctx.from.id})
				if (!isFeedRevoked_) {
					return ctx.reply(
						"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç. –ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –¥—Ä—É–≥–æ–π, —Å–ø–µ—Ä–≤–∞ –æ—Ç–≤—è–∂–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –∫–æ–º–∞–Ω–¥–æ–π /revoke."
					)
				}
			}

			await ctx.replyWithMarkdown(
				trimMessage(`
				üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–≤–æ—é –Ω–æ–≤–æ—Å—Ç–Ω—É—é –ª–µ–Ω—Ç—É –∏–∑ –í–ö –≤ –¢–µ–ª–µ–≥—Ä–∞–º. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –≤–∞—Å. –í–æ—Ç –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å:
				${howToAuthText}
			`),
				{
					reply_markup: {
						inline_keyboard: keyboards.authAndSecurity,
					},
				}
			)
			log.green("start", ctx.from.id)
		},
	},
	pause: {
		hears: ["‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", "/pause"],
		handler: async ctx => {
			const isFeedRevoked_ = await isFeedRevoked({chat_id: ctx.from.id})
			if (!isFeedRevoked_) {
				await pauseFeed({chat_id: ctx.from.id})
				await ctx.reply(
					"‚è∏ –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ö–æ–≥–¥–∞ —Å–Ω–æ–≤–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –µ–µ ‚Äì –≤—ã–∑–æ–≤–∏—Ç–µ /restart."
				)
				log.green("pause", ctx.from.id)
			} else {
				await ctx.replyWithMarkdown(
					trimMessage(`
					ü§î –•–º–º–º... –í—ã –µ—â–µ –Ω–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç. –í–æ—Ç –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å:
					${howToAuthText}
				`),
					{
						reply_markup: {
							inline_keyboard: keyboards.authAndSecurity,
						},
					}
				)
			}
		},
	},
	restart: {
		hears: ["‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", "/restart"],
		handler: async ctx => {
			const isFeedRevoked_ = await isFeedRevoked({chat_id: ctx.from.id})
			if (!isFeedRevoked_) {
				await activateFeed({chat_id: ctx.from.id})
				await ctx.reply(
					trimMessage(`
					‚ñ∂Ô∏è –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞. –° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –≤–∞—à–µ–π –ª–µ–Ω—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç.

					–ê –ø–æ–∫–∞ –≤—ã –∂–¥–µ—Ç–µ –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç, –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª @FilteredInternet ‚ù§
				`)
				)
				log.green("restart", ctx.from.id)
			} else {
				await ctx.replyWithMarkdown(
					trimMessage(`
					ü§î –•–º–º–º... –í—ã –µ—â–µ –Ω–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç. –í–æ—Ç –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å:
					${howToAuthText}
				`),
					{
						reply_markup: {
							inline_keyboard: keyboards.authAndSecurity,
						},
					}
				)
			}
		},
	},
	security: {
		hears: ["üîê –û –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "/security"],
		handler: async ctx => {
			const message = trimMessage(`
				–ï—Å–ª–∏ –≤–∞—Å –ø—É–≥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ _¬´–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–∞–π—Ç–æ–≤...¬ª_, —Ç–æ –≤–æ—Ç –ø—Ä–∏—á–∏–Ω—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–≤–µ—Ä—è—Ç—å –±–æ—Ç—É –∏ –ø–æ—á–µ–º—É –≤—ã –≤–æ–æ–±—â–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—ã–ª–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏:

				1. API –í–ö —É—Å—Ç—Ä–æ–µ–Ω—ã —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ –Ω–µ—Ç –Ω–∏ –µ–¥–∏–Ω–æ–≥–æ ¬´–±–µ–ª–æ–≥–æ¬ª —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ª–µ–Ω—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞. –ò–º–µ–Ω–Ω–æ –ø–æ—ç—Ç–æ–º—É –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å–ª–∞—Ç—å url –≤—Ä—É—á–Ω—É—é.
				2. –í—ã –¥–∞–µ—Ç–µ –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ª–µ–Ω—Ç–µ –∏ —Å–ø–∏—Å–∫—É –¥—Ä—É–∑–µ–π. –≠—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
				3. –ë–æ—Ç –Ω–µ —É–∑–Ω–∞–µ—Ç –≤–∞—à –ø–∞—Ä–æ–ª—å —Ç.–∫. –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É –ø—Ä–æ—Ç–æ–∫–æ–ª—É OAuth 2.0 (https://oauth.net/2/).
				4. –í–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ. –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
				5. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ —Å –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–≤–∞–≤ /revoke. –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å –±—É–¥–µ—Ç —Ç–∞–∫–∂–µ –æ—á–∏—â–µ–Ω–∞, —Ä–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞.
				6. –í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –æ—Ç–æ–∑–≤–∞—Ç—å –≤–∞—à –∫–ª—é—á (https://vk.com/settings?act=apps) –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ –í–ö. –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –±—É–¥–µ—Ç —Ç–∞–∫–∂–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞.
			`)
			const isAuthed_ = await isAuthed({chat_id: ctx.from.id})
			if (isAuthed_) {
				await ctx.replyWithMarkdown(message)
			} else {
				await ctx.replyWithMarkdown(message, {
					reply_markup: {
						inline_keyboard: keyboards.auth,
					},
				})
			}
			log.green("security", ctx.from.id)
		},
	},
	revoke: {
		hears: ["‚ùå –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", "/revoke"],
		handler: async ctx => {
			const isFeedRevoked_ = await isFeedRevoked({chat_id: ctx.from.id})
			if (!isFeedRevoked_) {
				await revokeAccessToken({chat_id: ctx.from.id})
				await ctx.replyWithMarkdown(
					trimMessage(`
					‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω. –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å–Ω–æ–≤–∞, –≤–æ—Ç –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å:
					${howToAuthText}
				`),
					{
						reply_markup: {
							inline_keyboard: keyboards.authAndSecurity,
						},
					}
				)
				log.green("revoke", ctx.from.id)
			} else {
				await ctx.replyWithMarkdown(
					trimMessage(`
					ü§î –•–º–º–º... –í—ã –µ—â–µ –Ω–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç. –í–æ—Ç –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å:
					${howToAuthText}
				`),
					{
						reply_markup: {
							inline_keyboard: keyboards.authAndSecurity,
						},
					}
				)
			}
		},
	},
	donate: {
		hears: ["üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", "/donate"],
		handler: async ctx => {
			await ctx.replyWithMarkdown(
				trimMessage(`
					–ü—Ä–æ—â–µ –≤—Å–µ–≥–æ –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –∑–¥–µ—Å—å: babki.mishasaidov.com

					–ÆMoney: \`4100117319944149\`
					QIWI: \`+77002622563\`
					BTC: \`1MDRDDBURiPEg93epMiryCdGvhEncyAbpy\`
					Kaspi üá∞üáø: \`4400 4302 1955 7599\`
				`)
			)
			log.green("donate", ctx.from.id)
		},
	},
	access_token: {
		hears: [accessTokenRegEx],
		handler: async ctx => {
			try {
				const user = await getVkUser({
					access_token: ctx.message.text.match(accessTokenRegEx)[1],
				})
				await attachAccessToken({
					chat_id: ctx.from.id,
					access_token: ctx.message.text.match(accessTokenRegEx)[1],
					first_name: user.response[0].first_name,
					last_name: user.response[0].last_name,
					user_id: user.response[0].id,
					timezone: user.response[0].timezone,
				})
				await ctx.replyWithMarkdown(
					trimMessage(`
					‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –í–ö —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω. –° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –≤–∞—à–µ–π –ª–µ–Ω—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç. –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

					üîó –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –í–ö, –∏ —è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –µ–≥–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ.

					–ê –ø–æ–∫–∞ –≤—ã –∂–¥–µ—Ç–µ –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç, –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª @FilteredInternet ‚ù§
				`)
				)
				log.green("access_token", ctx.from.id)
			} catch (err) {
				await ctx.reply(
					"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å–µ –ª–∏ –≤—ã —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ url —Å–Ω–æ–≤–∞. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –∏—Å—á–µ–∑–Ω–µ—Ç ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π @mikhailsdv."
				)
				log.red("VK USER NOT FOUND", ctx.from, err)
			}
		},
	},
	post_url: {
		hears: [postURLRegEx],
		handler: async ctx => {
			const isFeedRevoked_ = await isFeedRevoked({chat_id: ctx.from.id})
			const isAuthed_ = await isAuthed({chat_id: ctx.from.id})
			if (!isFeedRevoked_ && isAuthed_) {
				const user = await getUserByChatId({chat_id: ctx.from.id})
				const match = ctx.message.text.match(postURLRegEx)
				try {
					await ctx.replyWithChatAction("typing")
					const post = await getPostById({
						access_token: user.access_token,
						owner_id: match[1],
						post_id: match[2],
					})
					if (post.response.length === 0) {
						return ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Å—Ç.")
					}
					const categorizedPost = await categorizePost({
						access_token: user.access_token,
						timezone: user.timezone,
						post: post.response[0],
					})
					await sendPostToTelegram(ctx.from.id, categorizedPost)
					log.green("post_url", ctx.from.id)
				} catch (err) {
					log.red("POST BY URL ERROR", ctx.from, err)
				}
			} else {
				await ctx.replyWithMarkdown(
					trimMessage(`
					ü§î –•–º–º–º... –í—ã –µ—â–µ –Ω–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç. –í–æ—Ç –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å:
					${howToAuthText}
				`),
					{
						reply_markup: {
							inline_keyboard: keyboards.authAndSecurity,
						},
					}
				)
			}
		},
	},
}

const callbackQueries = {
	like: async (ctx, data) => {
		const isAuthed_ = await isAuthed({chat_id: ctx.chat.id})
		if (isAuthed_) {
			const user = await getUserByChatId({chat_id: ctx.chat.id})
			let post = await getPostById({
				access_token: user.access_token,
				owner_id: data[0],
				post_id: data[1],
			})
			const isMessageDeletedByTelegram = ctx.callbackQuery.message.date === 0
			if (post.response.length === 1) {
				post = post.response[0]
				try {
					if (post.likes.user_likes) {
						await deleteLike({
							access_token: user.access_token,
							owner_id: data[0],
							item_id: data[1],
						})
						await ctx.answerCbQuery("–õ–∞–π–∫ —É–±—Ä–∞–Ω üñ§")
						!isMessageDeletedByTelegram &&
							(await ctx.editMessageReplyMarkup({
								inline_keyboard: [
									[
										{
											text: "üëÅ",
											url: `https://vk.com/wall${post.owner_id}_${post.id}`,
										},
										{
											text: "üñ§",
											callback_data: buildCallbackData(
												"like",
												data[0],
												data[1]
											),
										},
									],
								],
							}))
					} else {
						await addLike({
							access_token: user.access_token,
							owner_id: data[0],
							item_id: data[1],
						})
						await ctx.answerCbQuery("–õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω ‚ù§")
						!isMessageDeletedByTelegram &&
							(await ctx.editMessageReplyMarkup({
								inline_keyboard: [
									[
										{
											text: "üëÅ",
											url: `https://vk.com/wall${post.owner_id}_${post.id}`,
										},
										{
											text: "‚ù§",
											callback_data: buildCallbackData(
												"like",
												data[0],
												data[1]
											),
										},
									],
								],
							}))
					}
				} catch (err) {
					await ctx.answerCbQuery("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫")
					if (err?.error?.error_code === 17) {
						log.red("VK VALIDATION FAILED:", ctx.chat.id)
						await ctx.telegram.sendMessage(
							ctx.chat.id,
							trimMessage(`
									‚ö† –ß—Ç–æ–±—ã –ª–∞–π–∫–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤–∞—à —Ç–æ–∫–µ–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ —Å–ª—É—á–∞–π –Ω–µ–ø–æ–ª–∞–¥–æ–∫ @mikhailsdv.
									${howToAuthText}
								`),
							{
								reply_markup: {
									inline_keyboard: [
										[
											{
												text: "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –í–ö",
												url: err.error.redirect_uri,
											},
										],
									],
								},
							}
						)
					} else {
						log.red("UNKNOWN ERROR: chat_id", ctx.chat.id, ctx.callbackQuery, err)
					}
				}
			} else {
				await ctx.answerCbQuery("üò¢ –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.")
			}
		} else {
			await ctx.answerCbQuery("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç")
		}
	},
	security: async ctx => {
		await commands.security.handler(ctx)
		await ctx.answerCbQuery()
	},
}

bot.catch((err, ctx) => {
	log.red(`Ooops, encountered an error for ${ctx.updateType}`, err)
})

Object.values(commands).forEach(command => {
	bot.hears(command.hears, command.handler)
})

bot.on("callback_query", async ctx => {
	const callbackData = parseCallbackData(ctx.callbackQuery.data)
	callbackQueries[callbackData.command] &&
		(await callbackQueries[callbackData.command](ctx, callbackData.data))
})

/*bot.command("donate", ctx => {
	console.log(`${getDateString()}: Donate`)
	return ctx.replyWithMarkdown(phrases.donate)
})

bot.command("hints", ctx => {
	console.log(`${getDateString()}: Hints`)
	return ctx.replyWithMarkdown(phrases.hints)
})

bot.on("text", async ctx => {
	const message = ctx.update.message
	const from = message.from
	
})*/

bot.launch({dropPendingUpdates: true})

/*
start - üòé –ù–∞—á–∞—Ç—å
pause - ‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
restart - ‚ñ∂ –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
revoke - ‚ùå –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
donate - üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
security - üîê –û –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
*/
